{"ast":null,"code":"var _jsxFileName = \"/Users/lewis.stone/Desktop/untitled-folder/sec/lights-out-game/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let y = 0; y < nrows; y++) {\n      for (let x = 0; x < ncols; x++) {\n        if (board[y][x]) return false;\n      }\n    }\n    return true;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      // TODO: return the copy\n      return boardCopy;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if (hasWon()) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"You won!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 24\n  }, this);\n\n  // make table board\n  const tblBoard = /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, y) => {\n        return /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: row.map((cell, x) => {\n            const coord = `${y}-${x}`;\n            return /*#__PURE__*/_jsxDEV(Cell, {\n              isLit: board[y][x],\n              flipCellsAroundMe: () => flipCellsAround(coord)\n            }, coord, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 21\n            }, this);\n          })\n        }, y, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n  if (hasWon()) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"You won!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 24\n  }, this);\n  return tblBoard;\n}\n_s(Board, \"3s4dikL07wPnNIfkLBQbHft9HDQ=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","flipCellsAround","coord","oldBoard","split","map","Number","flipCell","boardCopy","children","fileName","_jsxFileName","lineNumber","columnNumber","tblBoard","className","cell","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/lewis.stone/Desktop/untitled-folder/sec/lights-out-game/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard( ));\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    // TODO: create array-of-arrays of true/false values\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x =0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // TODO: check the board in state to determine whether the player has won.\n    for (let y = 0; y < nrows; y++) {\n      for (let x = 0; x < ncols; x++) {\n        if (board[y][x]) return false;\n      }\n    }\n    return true;\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      let boardCopy = oldBoard.map(row => [...row]);\n\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, boardCopy);\n      flipCell(y, x - 1, boardCopy);\n      flipCell(y, x + 1, boardCopy);\n      flipCell(y - 1, x, boardCopy);\n      flipCell(y + 1, x, boardCopy);\n      // TODO: return the copy\n      return boardCopy\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  // TODO\n  if (hasWon()) return <div>You won!</div>;\n\n\n  // make table board\n  const tblBoard = (\n    <table className=\"Board\">\n      <tbody>\n        { board.map((row, y) =>  {\n          return (\n            <tr key={y}>\n                {row.map((cell, x) => {\n                  const coord = `${y}-${x}`;\n                  return (\n                    <Cell\n                      key={coord}\n                      isLit={board[y][x]}\n                      flipCellsAroundMe={() => flipCellsAround(coord)}\n                    />\n                  );\n                })}\n            </tr>\n          );\n        })}\n      \n      </tbody>\n    </table>\n);\n  \n  if (hasWon()) return <div>You won!</div>;\n  \n  return tblBoard;\n}\n\n\n\n\n\nexport default Board;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}